:-test(100).
:-test(X).
:-test(X),nonvar(X).
:-test(X),integer(X).
:-test(X),number(X).
:-test(X),atomic(X).
:-test(X),test(X).
:-test(X),test(Y),X=Y.
:-test(X),test(Y),X\=Y.
:-test(X),test(Y),X==Y.
:-test(X),test(Y),X\==Y.
:-test(X),test(Y),X>Y.
:-test(X),test(Y),X>=Y.
:-test(X),test(Y),X<Y.
:-test(X),test(Y),X=<Y.
:-test(X),test(Y),X=:=Y.
:-test(X),test(Y),X=\=Y.
:-test(X),test(Y),300 is X + Y.
:-test(X),test(Y),X is - (Y + 100) * 2 mod 200 - (Y ** 1 + 100) * 2 // 200 + 103 .
:- not 10 > 15 .
:-test(100)=..X.
:-X=..[test, 100].
:-test(100)=..[test, 100].
:-"a"@<"b".
:-"a"@<="a".
:-"b"@>"a".
:-"a"@>="a".
:-test(100)@<test(200).
:-test(100)@<=test(100).
:-test(200)@>test(100).
:-test(100)@>=test(100).
:-X=..[test,100],call(X).
:-functor(test(100),test,1).
:-arg(test(100),1,100).
:-name(test(100),test).
:-bagof(newPred(X,100),test(X),Y).
:-setof(newPred(X,100),test(X),Y).
:-findall(newPred(X,100),test(X),Y).
:-findall(newPred(X,100),notest(X),Y).
:-assertz(added(100)).
:-asserta(added(200)).
:-assert(added(300)).
:-retract(added(X)).
:-memberOf([100,200,300],X).
:-memberOf([100,200,300],X).
:-memberOf([100,200,300],200).
:-memberOf([100,200,300],_).
:-test(X);test(Y).
:-test(X),!.
:-test(X),repeat,test(Y),Y is X + 100,!.
:-predicate(X).
